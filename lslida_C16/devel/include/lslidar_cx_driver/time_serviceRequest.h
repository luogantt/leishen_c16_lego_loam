// Generated by gencpp from file lslidar_cx_driver/time_serviceRequest.msg
// DO NOT EDIT!


#ifndef LSLIDAR_CX_DRIVER_MESSAGE_TIME_SERVICEREQUEST_H
#define LSLIDAR_CX_DRIVER_MESSAGE_TIME_SERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lslidar_cx_driver
{
template <class ContainerAllocator>
struct time_serviceRequest_
{
  typedef time_serviceRequest_<ContainerAllocator> Type;

  time_serviceRequest_()
    : time_service_mode()
    , ntp_ip()  {
    }
  time_serviceRequest_(const ContainerAllocator& _alloc)
    : time_service_mode(_alloc)
    , ntp_ip(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _time_service_mode_type;
  _time_service_mode_type time_service_mode;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ntp_ip_type;
  _ntp_ip_type ntp_ip;





  typedef boost::shared_ptr< ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct time_serviceRequest_

typedef ::lslidar_cx_driver::time_serviceRequest_<std::allocator<void> > time_serviceRequest;

typedef boost::shared_ptr< ::lslidar_cx_driver::time_serviceRequest > time_serviceRequestPtr;
typedef boost::shared_ptr< ::lslidar_cx_driver::time_serviceRequest const> time_serviceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator1> & lhs, const ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.time_service_mode == rhs.time_service_mode &&
    lhs.ntp_ip == rhs.ntp_ip;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator1> & lhs, const ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lslidar_cx_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "21fd24a4b0ea7145fae6e14eb88bf1a4";
  }

  static const char* value(const ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x21fd24a4b0ea7145ULL;
  static const uint64_t static_value2 = 0xfae6e14eb88bf1a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lslidar_cx_driver/time_serviceRequest";
  }

  static const char* value(const ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string time_service_mode\n"
"string ntp_ip\n"
;
  }

  static const char* value(const ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_service_mode);
      stream.next(m.ntp_ip);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct time_serviceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lslidar_cx_driver::time_serviceRequest_<ContainerAllocator>& v)
  {
    s << indent << "time_service_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.time_service_mode);
    s << indent << "ntp_ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ntp_ip);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LSLIDAR_CX_DRIVER_MESSAGE_TIME_SERVICEREQUEST_H

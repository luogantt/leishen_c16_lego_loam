// Generated by gencpp from file lslidar_cx_driver/motor_speedRequest.msg
// DO NOT EDIT!


#ifndef LSLIDAR_CX_DRIVER_MESSAGE_MOTOR_SPEEDREQUEST_H
#define LSLIDAR_CX_DRIVER_MESSAGE_MOTOR_SPEEDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lslidar_cx_driver
{
template <class ContainerAllocator>
struct motor_speedRequest_
{
  typedef motor_speedRequest_<ContainerAllocator> Type;

  motor_speedRequest_()
    : motor_speed(0)  {
    }
  motor_speedRequest_(const ContainerAllocator& _alloc)
    : motor_speed(0)  {
  (void)_alloc;
    }



   typedef int32_t _motor_speed_type;
  _motor_speed_type motor_speed;





  typedef boost::shared_ptr< ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator> const> ConstPtr;

}; // struct motor_speedRequest_

typedef ::lslidar_cx_driver::motor_speedRequest_<std::allocator<void> > motor_speedRequest;

typedef boost::shared_ptr< ::lslidar_cx_driver::motor_speedRequest > motor_speedRequestPtr;
typedef boost::shared_ptr< ::lslidar_cx_driver::motor_speedRequest const> motor_speedRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator1> & lhs, const ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator2> & rhs)
{
  return lhs.motor_speed == rhs.motor_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator1> & lhs, const ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lslidar_cx_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e73ccebe9d15bcc23dbe6f2ca7a3937";
  }

  static const char* value(const ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e73ccebe9d15bccULL;
  static const uint64_t static_value2 = 0x23dbe6f2ca7a3937ULL;
};

template<class ContainerAllocator>
struct DataType< ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lslidar_cx_driver/motor_speedRequest";
  }

  static const char* value(const ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 motor_speed\n"
;
  }

  static const char* value(const ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_speedRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lslidar_cx_driver::motor_speedRequest_<ContainerAllocator>& v)
  {
    s << indent << "motor_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LSLIDAR_CX_DRIVER_MESSAGE_MOTOR_SPEEDREQUEST_H

// Generated by gencpp from file lslidar_cx_driver/lslidar_control.msg
// DO NOT EDIT!


#ifndef LSLIDAR_CX_DRIVER_MESSAGE_LSLIDAR_CONTROL_H
#define LSLIDAR_CX_DRIVER_MESSAGE_LSLIDAR_CONTROL_H

#include <ros/service_traits.h>


#include <lslidar_cx_driver/lslidar_controlRequest.h>
#include <lslidar_cx_driver/lslidar_controlResponse.h>


namespace lslidar_cx_driver
{

struct lslidar_control
{

typedef lslidar_controlRequest Request;
typedef lslidar_controlResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct lslidar_control
} // namespace lslidar_cx_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::lslidar_cx_driver::lslidar_control > {
  static const char* value()
  {
    return "1e4c56296cb3b5595cee64c461c3d984";
  }

  static const char* value(const ::lslidar_cx_driver::lslidar_control&) { return value(); }
};

template<>
struct DataType< ::lslidar_cx_driver::lslidar_control > {
  static const char* value()
  {
    return "lslidar_cx_driver/lslidar_control";
  }

  static const char* value(const ::lslidar_cx_driver::lslidar_control&) { return value(); }
};


// service_traits::MD5Sum< ::lslidar_cx_driver::lslidar_controlRequest> should match
// service_traits::MD5Sum< ::lslidar_cx_driver::lslidar_control >
template<>
struct MD5Sum< ::lslidar_cx_driver::lslidar_controlRequest>
{
  static const char* value()
  {
    return MD5Sum< ::lslidar_cx_driver::lslidar_control >::value();
  }
  static const char* value(const ::lslidar_cx_driver::lslidar_controlRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::lslidar_cx_driver::lslidar_controlRequest> should match
// service_traits::DataType< ::lslidar_cx_driver::lslidar_control >
template<>
struct DataType< ::lslidar_cx_driver::lslidar_controlRequest>
{
  static const char* value()
  {
    return DataType< ::lslidar_cx_driver::lslidar_control >::value();
  }
  static const char* value(const ::lslidar_cx_driver::lslidar_controlRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::lslidar_cx_driver::lslidar_controlResponse> should match
// service_traits::MD5Sum< ::lslidar_cx_driver::lslidar_control >
template<>
struct MD5Sum< ::lslidar_cx_driver::lslidar_controlResponse>
{
  static const char* value()
  {
    return MD5Sum< ::lslidar_cx_driver::lslidar_control >::value();
  }
  static const char* value(const ::lslidar_cx_driver::lslidar_controlResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::lslidar_cx_driver::lslidar_controlResponse> should match
// service_traits::DataType< ::lslidar_cx_driver::lslidar_control >
template<>
struct DataType< ::lslidar_cx_driver::lslidar_controlResponse>
{
  static const char* value()
  {
    return DataType< ::lslidar_cx_driver::lslidar_control >::value();
  }
  static const char* value(const ::lslidar_cx_driver::lslidar_controlResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // LSLIDAR_CX_DRIVER_MESSAGE_LSLIDAR_CONTROL_H
